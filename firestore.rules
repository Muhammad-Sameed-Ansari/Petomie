rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to check if the user is trying to access their own data
    function isUserDocument() {
      return isAuthenticated() && request.auth.uid == resource.id;
    }

    // Function to validate subscription data structure
    function isValidSubscriptionData() {
      let data = request.resource.data;
      return data.keys().hasAll(['status', 'lastUpdated']) &&
             data.status is string &&
             data.status in ['active', 'expired', 'canceled', 'paused', 'none'] &&
             data.lastUpdated is timestamp &&
             (data.type == null || data.type is string) &&
             (data.startDate == null || data.startDate is timestamp) &&
             (data.endDate == null || data.endDate is timestamp) &&
             (data.transactionId == null || data.transactionId is string) &&
             (data.originalTransactionId == null || data.originalTransactionId is string) &&
             (data.autoRenew == null || data.autoRenew is bool) &&
             (data.metadata == null || data.metadata is map);
    }

    // Subscription collection rules
    match /subscriptions/{userId} {
      // Users can read their own subscription data
      allow read: if isOwner(userId);

      // Users can create their own subscription document
      // This allows the app to create initial subscription records
      allow create: if isOwner(userId) && isValidSubscriptionData();

      // Users can update their own subscription data
      // This is typically done by the app when subscription status changes
      allow update: if isOwner(userId) && isValidSubscriptionData();

      // Prevent deletion of subscription documents for audit purposes
      // Only allow if the user is the owner (in case you need to allow it later)
      allow delete: if false; // Change to 'isOwner(userId)' if you want to allow deletion
    }

    // Optional: User profiles collection (if you have one)
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Optional: Audit logs for subscription changes (if you implement them)
    match /subscription_logs/{logId} {
      // Only allow reading audit logs for the user's own subscription
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Only the server should create audit logs (using Admin SDK)
      allow create, update, delete: if false;
    }

    // Default rule: deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
Security Rules Explanation:

1. Authentication Required:
   - All operations require user authentication
   - Users can only access their own subscription data

2. Subscription Data Access:
   - Users can read their own subscription status
   - Users can create/update their subscription document (needed for app functionality)
   - Subscription data structure is validated to prevent malicious data

3. Data Validation:
   - Ensures subscription status is one of the valid enum values
   - Validates data types for all fields
   - Requires lastUpdated timestamp for audit purposes

4. Security Features:
   - Prevents users from accessing other users' subscription data
   - Validates data structure to prevent injection of malicious data
   - Prevents deletion of subscription documents for audit trail
   - Default deny rule for any unmatched paths

5. Audit Trail:
   - Optional audit logs collection for tracking subscription changes
   - Only readable by the subscription owner
   - Only writable by server-side code (Admin SDK)

To deploy these rules:
1. Install Firebase CLI: npm install -g firebase-tools
2. Login: firebase login
3. Initialize (if not already): firebase init firestore
4. Deploy: firebase deploy --only firestore:rules

Note: Make sure to test these rules thoroughly before deploying to production.
You can use the Firebase Emulator Suite for testing:
firebase emulators:start --only firestore
*/
